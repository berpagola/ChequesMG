/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Visual;

import conexiones.DBconection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author martin
 */
public class Feriados extends javax.swing.JFrame {

    /**
     * Creates new form Feriados
     */
    DBconection con;
    TablaCheques parent;

    public Feriados(TablaCheques paren) {
        initComponents();
        parent = paren;
        this.setVisible(true);
        llenarTabla();

    }

    public void llenarTabla() {
        try {
            con = new DBconection();
            DefaultTableModel modelo = new DefaultTableModel() {
                //Con esto conseguimos que la tabla no se pueda editar
                @Override
                public boolean isCellEditable(int fila, int columna) {
                    return false;
                }
            };
            modelo.addColumn("Dia Feriado");
            ResultSet rs;
            Statement st;
            st = con.conectar().createStatement();
            rs = st.executeQuery("SELECT * FROM `Feriados`");
            while (rs.next()) {
                Object[] fila = new Object[1];
                fila[0] = rs.getString("Feriado");
                modelo.addRow(fila); // AÃ±ade una fila al final del modelo de la tabla
            }
            rs.close();
            st.close();
            tabla.setModel(modelo);
            tabla.updateUI();
            tabla.getColumnModel().getColumn(0).setPreferredWidth(100);
            //Actualiza la tabla
            tabla.setRowHeight(25);
            TableRowSorter<TableModel> ordenar = new TableRowSorter<TableModel>(modelo);
            tabla.setRowSorter(ordenar);
            //tabla.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error al conectarse con la Base de Datos. Intente establecer la conexion o contacte con el administrador");
            System.out.println(e);
            System.exit(0);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    public static Date sumarFecha(String s) {
        try {
            SimpleDateFormat formateador = new SimpleDateFormat("yyyy-MM-dd");
            Date d = formateador.parse(s);
            Calendar cal = new GregorianCalendar();
            cal.setTime(d);
            cal.add(cal.DATE, 1);
            return new Date(cal.getTimeInMillis());
        } catch (ParseException ex) {
            Logger.getLogger(Feriados.class.getName()).log(Level.SEVERE, null, ex);
            System.exit(0);
            return null;
        }
    }

    public static Date sumarFecha(Date d) {
        Calendar cal = new GregorianCalendar();
        cal.setTime(d);
        cal.add(cal.DATE, 1);
        return new Date(cal.getTimeInMillis());
    }

    public static Date sumarMes(Date d) {
        Calendar cal = new GregorianCalendar();
        cal.setTime(d);
        cal.add(cal.MONTH, 1);
        return new Date(cal.getTimeInMillis());
    }

    public static Date actualizarFinSemana(String s) {
        try {
            SimpleDateFormat formateador = new SimpleDateFormat("yyyy-MM-dd");
            Date d = formateador.parse(s);
            if (d.getDay() == 6) {
                Calendar cal = new GregorianCalendar();
                cal.setTime(d);
                cal.add(cal.DATE, 2);
                return new Date(cal.getTimeInMillis());
            } else if (d.getDay() == 0) {
                Calendar cal = new GregorianCalendar();
                cal.setTime(d);
                cal.add(cal.DATE, 1);
                return new Date(cal.getTimeInMillis());
            } else {
                return d;
            }
        } catch (ParseException ex) {
            Logger.getLogger(Feriados.class.getName()).log(Level.SEVERE, null, ex);
            System.exit(0);
            return null;
        }
    }

    public static Date actualizarFinSemana(Date d) {
        if (d.getDay() == 6) {
            Calendar cal = new GregorianCalendar();
            cal.setTime(d);
            cal.add(cal.DATE, 2);
            return new Date(cal.getTimeInMillis());
        } else if (d.getDay() == 0) {
            Calendar cal = new GregorianCalendar();
            cal.setTime(d);
            cal.add(cal.DATE, 1);
            return new Date(cal.getTimeInMillis());
        } else {
            return d;
        }
    }

    public static void actualizarFechas() {
        try {
            DBconection con = new DBconection();
            ResultSet rs;
            Statement st, ac;
            Date aux;
            st = con.conectar().createStatement();
            ac = con.conectar().createStatement();
            rs = st.executeQuery("SELECT * FROM `Cheques` INNER JOIN `Feriados` ON (Cheques.FechaPago=Feriados.Feriado)");
            while (rs.next()) {
                aux = sumarFecha(rs.getString("FechaPago"));
                aux = actualizarFinSemana(aux);
                ac.executeUpdate("UPDATE `Cheques` SET FechaPago='" + TablaCheques.convFecha(aux) + "' WHERE Numero=" + rs.getString("Numero"));
                rs = st.executeQuery("SELECT * FROM `Cheques` INNER JOIN `Feriados` ON (Cheques.FechaPago=Feriados.Feriado)");
            }
            rs.close();
            st.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error al conectarse con la Base de Datos. Intente establecer la conexion o contacte con el administrador");
            System.out.println(e);
            System.exit(0);
        }
    }

    public static void actualizarFechas(String quer) {
        try {
            DBconection con = new DBconection();
            ResultSet rs;
            Statement st, ac;
            Date aux;
            st = con.conectar().createStatement();
            ac = con.conectar().createStatement();
            rs = st.executeQuery("SELECT * FROM `Cheques` INNER JOIN `Feriados` ON (Cheques.FechaPago=Feriados.Feriado) WHERE Cheques.Numero='" + quer + "'");
            while (rs.next()) {
                aux = sumarFecha(rs.getString("FechaPago"));
                aux = actualizarFinSemana(aux);
                ac.executeUpdate("UPDATE `Cheques` SET FechaPago='" + TablaCheques.convFecha(aux) + "' WHERE Numero=" + rs.getString("Numero"));
                rs = st.executeQuery("SELECT * FROM `Cheques` INNER JOIN `Feriados` ON (Cheques.FechaPago=Feriados.Feriado) WHERE Cheques.Numero='" + quer + "'");
            }
            rs.close();
            st.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error al conectarse con la Base de Datos. Intente establecer la conexion o contacte con el administrador");
            System.out.println(e);
            System.exit(0);
        }
    }
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        fecha = new com.toedter.calendar.JDateChooser();
        jButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tabla);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jButton1.setText("Agregar Fecha");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(fecha, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(9, 9, 9)
                        .add(jButton1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 135, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .add(24, 24, 24)
                .add(jButton1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                .add(18, 18, 18)
                .add(fecha, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(32, 32, 32))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jButton2.setText("Eliminar Fecha");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(17, 17, 17)
                .add(jButton2)
                .addContainerGap(17, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(27, 27, 27)
                .add(jButton2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 44, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 217, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (fecha.getDate() == null) {
            JOptionPane.showMessageDialog(null, "Debe seleccionar una fecha para agregar a los feriados");
        } else {
            try {
                con = new DBconection();
                Statement st = con.conectar().createStatement();
                ResultSet rs = st.executeQuery("SELECT * FROM `Feriados` WHERE Feriado = '" + TablaCheques.convFecha(fecha.getDate()) + "'");
                if (!rs.first()) {
                    st.executeUpdate("INSERT INTO Feriados(Feriado) VALUE ('" + TablaCheques.convFecha(fecha.getDate()) + "')");
                    JOptionPane.showMessageDialog(null, "Se agrego el feriado correctamente");
                    actualizarFechas();
                    llenarTabla();
                } else {
                    JOptionPane.showMessageDialog(null, "El Feriado ya fue ingresado");
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Error al conectarse con la Base de Datos. Intente establecer la conexion o contacte con el administrador");
                System.out.println(ex);
                System.exit(0);
            }
        }
    }

    public static String FechaDB(String anio, String mes, String dia) {
        String fecha = new String(anio + "-" + mes + "-" + dia);
        return fecha;

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int r = tabla.getSelectedRow();
        if (tabla.getSelectedRows().length != 1) {
            JOptionPane.showMessageDialog(null, "Debe seleccionar un feriado a eliminar");
        } else {
            try {
                con = new DBconection();
                Statement st = con.conectar().createStatement();
                st.executeUpdate("DELETE FROM Feriados WHERE Feriado='" + (String) tabla.getValueAt(tabla.getSelectedRow(), 0) + "'");
                ResultSet rs;
                rs = st.executeQuery("SELECT * FROM `Cheques`");
                Date day;
                while (rs.next()) {
                    SimpleDateFormat formateador = new SimpleDateFormat("yyyy-MM-dd");
                    day = formateador.parse(rs.getString("FechaOriginal"));
                    day = Feriados.actualizarFinSemana(day);
                    Statement ac = con.conectar().createStatement();
                    ac.executeUpdate("UPDATE `Cheques` SET Numero='" + rs.getString("Numero") + "', Importe='" + rs.getString("Importe") + "', Chequera='" + rs.getString("Chequera") + "', Factura='" + rs.getString("Factura") + "', Beneficiario='" + rs.getString("Beneficiario") + "', FechaEmision='" + rs.getString("FechaEmision") + "', FechaPago='" + TablaCheques.convFecha(day) + "' , FechaOriginal='" + rs.getString("FechaOriginal") + "', Pagado='" + rs.getString("Pagado") + "' WHERE Numero=" + rs.getString("Numero"));
                }
                Feriados.actualizarFechas();
                JOptionPane.showMessageDialog(null, "Se elimino el feriado correctamente");
                con.desconectar();
                llenarTabla();
            } catch (ParseException ex) {
                Logger.getLogger(Feriados.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Error al conectarse con la Base de Datos. Intente establecer la conexion o contacte con el administrador");
                System.out.println(ex);
                System.exit(0);
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        parent.setVisible(true);
        parent.setEnabled(true);
        this.dispose();
        parent.llenarTabla();
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Feriados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Feriados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Feriados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Feriados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser fecha;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabla;
    // End of variables declaration//GEN-END:variables
}
